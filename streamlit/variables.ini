[sessionInfo]
sessionID = (\d+):.* creating folder for session (_trip.*_y)
sessionID_DTS = (\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}\.\d{3}).*Creating new folder .*0(_trip.*_y)
session_endTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*INFO - Moving .*0(_trip.*_y).*
sessionIDSyncRef = .*INFO - File sync finished: /home/iriscli/ND_INPUT/0(_trip.*_y).*
ota = .*src.outwardNonRealTime - INFO - Processing NRT with code_version: (.*)
currentSession = .*root - INFO - We are going to operate on.*0(_trip.*_y).*

[inwardClient]
startTime = updating session_start_time to (\d+).*session_id: .*0(_trip.*_y)
endTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*Wrote nrt session data.*0(_trip.*_y)/.*
eventsDetected = Detected a total of (\d+) events for .*0(_trip[^/]+)

[outwardClient]
startTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*Start processing for session: .*0(_trip.*_y)
endTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*Wrote accumulated observation data for session: 0(_trip.*_y)

[inertialClient]
endTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*Wrote nrt session data.*0(_trip.*_y).*
startTime = (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*Gathering inertial real-time obsdata/events .*0(_trip.*_y)

[inferenceInertial]
processing = .*Processing /home/iriscli/ND_INPUT/0(_trip.*_y)metadata
summaryFile = .* INFO - Created .*0(_trip.*_y).*

[analyticsService]
InwardDroppedSession = .*Inward - Dropped Session .*0(_trip.*_y).*due to (.*)\.
OutwardDroppedSession = .*Outward - Dropped Session .*0(_trip.*_y).*due to (.*)\.
OutwardDroppedSession_slowdown = .*OUTWARD.*dropping.*0(_trip.*_y).*due to(.*)
InwardDroppedSession_slowdown = .*INWARD.*dropping.*0(_trip.*_y).*due to(.*)
Session_processed = \d+: \d+: AS: I: \d+: \d+: (.*ward) - Session Change.*0(_trip.*_y).*

[inference]
Summary = .*\.(.*ward)NonRealTime.*- INFO - Writing summary data .*0(_trip.*_y).*
; inwardSummary = .*src.inward.inwardNonRealTime - INFO - Writing summary data .*0(_trip.*_y).*
Processing = .*\.(.*ward)NonRealTime.*- INFO - NRT processing finished .* 0(_trip.*_y) with status (\d{1}) in (.*) seconds
NRT_failure = .*\.(.*ward)NonRealTime.* NRT processing failed.*
; inwardProcessing = .*src.inward.inwardNonRealTime - INFO - NRT processing finished .* 0(_trip.*_y) with status (\d{1}) in (.*) seconds